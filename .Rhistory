# o gráfico tem uma barra muito fora do normal para idade=0
# comando which() seleciona parte dos dados (retira idade=0)
# estrutura do data.frame dados[linha,coluna]
teste<-dados[which(dados$idade>0),]
# read.dta() comando do pacote foreign para ler arquivo
# eu estou usando arquivo do Estado da BAHIA, você indicará o seu arquivo de trabalho
dados<-read.dta("do_age_MG.dta")
library(foreign, lib.loc = "C:/Program Files/R/R-4.1.1/library")
library(apyramid)
# ativa o pacote foreign para carregar arquivos padrão STATA (.dta)
require(foreign)
# read.dta() comando do pacote foreign para ler arquivo
# eu estou usando arquivo do Estado da BAHIA, você indicará o seu arquivo de trabalho
dados<-read.dta("do_age_MG.dta")
barplot(table(dados$covid,dados$idade))
# o gráfico tem uma barra muito fora do normal para idade=0
# comando which() seleciona parte dos dados (retira idade=0)
# estrutura do data.frame dados[linha,coluna]
teste<-dados[which(dados$idade>0),]
barplot(table(teste$covid,teste$idade))
# criando piramide etária
# instalar o pacote "apyramid"
require(apyramid)
# criando subconjunto de variáveis para plotar piramide
# conferir a sintaxe com "help(apyramid)"
# variáveis devem estar declaradas como "factor()"
piramide.covid<-data.frame(idade=factor(teste$idade),covid=teste$covid,stringsAsFactors=TRUE)
# comando que plota a piramide por causa da morte
age_pyramid(piramide.covid,age_group=idade,split_by=covid)
# piramide por sexo
piramide.sexo<-data.frame(idade=factor(teste$idade),sexo=teste$sexo,stringsAsFactors=TRUE)
age_pyramid(piramide.sexo,age_group=idade,split_by=sexo)
# sexo ignorado? (I) ... retirar estes dados
# eliminando sexo="I" ... variável temporária
piramide.tmp<-teste[which(teste$sexo!="I"),]
# checando eliminação
table(piramide.tmp$sexo)
# agora preparar o data.frame para apyramid
piramide.sexo<-data.frame(idade=factor(piramide.tmp$idade),sexo=piramide.tmp$sexo,stringsAsFactors=TRUE)
age_pyramid(piramide.sexo,age_group=idade,split_by=sexo,show_midpoint=FALSE)
###### CRIANDO FAIXAS ETÁRIAS DE 10 EM 10 ANOS
# 1-10anos, 11-20anos, 21-30anos, 31-40anos, 41-50anos, 51-60anos, 61-70anos, 71-80ano, 81-90anos, +90anos
# cria data.frame expandido com variável etaria, que conterá classificação da idade (NA=vazio)
dados.etaria<-data.frame(dados,etaria=NA)
# lê o número de linhas a classificar
k<-dim(dados.etaria)[1]
# loop de classificação da idade em faixas etárias
for (i in 1:k) {
y<-dados.etaria$idade[i]/10
if (y-round(y)>0) {dados.etaria$etaria[i]=round(y)+1 } else {dados.etaria$etaria[i]=round(y) }
}
library(foreign, lib.loc = "C:/Program Files/R/R-4.1.1/library")
library(apyramid)
# criando subconjunto de variáveis para plotar piramide
# conferir a sintaxe com "help(apyramid)"
# variáveis devem estar declaradas como "factor()"
piramide.covid<-data.frame(idade=factor(teste$idade),covid=teste$covid,stringsAsFactors=TRUE)
# comando que plota a piramide por causa da morte
age_pyramid(piramide.covid,age_group=idade,split_by=covid)
# piramide por sexo
piramide.sexo<-data.frame(idade=factor(teste$idade),sexo=teste$sexo,stringsAsFactors=TRUE)
age_pyramid(piramide.sexo,age_group=idade,split_by=sexo)
# sexo ignorado? (I) ... retirar estes dados
# eliminando sexo="I" ... variável temporária
piramide.tmp<-teste[which(teste$sexo!="I"),]
# checando eliminação
table(piramide.tmp$sexo)
# agora preparar o data.frame para apyramid
piramide.sexo<-data.frame(idade=factor(piramide.tmp$idade),sexo=piramide.tmp$sexo,stringsAsFactors=TRUE)
age_pyramid(piramide.sexo,age_group=idade,split_by=sexo,show_midpoint=FALSE)
###### CRIANDO FAIXAS ETÁRIAS DE 10 EM 10 ANOS
# 1-10anos, 11-20anos, 21-30anos, 31-40anos, 41-50anos, 51-60anos, 61-70anos, 71-80ano, 81-90anos, +90anos
# cria data.frame expandido com variável etaria, que conterá classificação da idade (NA=vazio)
dados.etaria<-data.frame(dados,etaria=NA)
# lê o número de linhas a classificar
k<-dim(dados.etaria)[1]
# loop de classificação da idade em faixas etárias
for (i in 1:k) {
y<-dados.etaria$idade[i]/10
if (y-round(y)>0) {dados.etaria$etaria[i]=round(y)+1 } else {dados.etaria$etaria[i]=round(y) }
}
# criando fatores
niveis<-c(1:10)
rotulos<-c("1-10anos", "11-20anos","21-30anos","31-40anos","41-50anos","51-60anos","61-70anos","71-80anos","81-90anos","+90anos")
# agora preparar o data.frame para apyramid
piramide.etaria<-data.frame(etaria=factor(dados.etaria$etaria),sexo=dados.etaria$sexo,stringsAsFactors=TRUE)
age_pyramid(piramide.etaria,age_group=etaria,split_by=sexo,show_midpoint=FALSE,)
###### CRIANDO FAIXAS ETÁRIAS POR FASES DA VIDA
# 1-12anos, 13-17anos, 18-25anos, 26-45anos, 46-65anos, +65anos
dados<-read.dta("do_age_BA.dta")
# eliminando sexo="I" ... visto que produziremos uma pirâmide
dados<-dados[which(dados$sexo!="I"),]
# cria data.frame expandido com variável etaria, que conterá classificação da idade (NA=vazio)
dados.etaria<-data.frame(dados,etaria=NA)
# lê o número de linhas a classificar
k<-dim(dados.etaria)[1]
# loop de classificação da idade em faixas etárias
for (i in 1:k) {
if (dados.etaria$idade[i]<=12) {dados.etaria$etaria[i]=1}
if (dados.etaria$idade[i]>12 & dados.etaria$idade[i]<=17) {dados.etaria$etaria[i]=2}
if (dados.etaria$idade[i]>=18 & dados.etaria$idade[i]<=25) {dados.etaria$etaria[i]=3}
if (dados.etaria$idade[i]>=26 & dados.etaria$idade[i]<=45) {dados.etaria$etaria[i]=4}
if (dados.etaria$idade[i]>=46 & dados.etaria$idade[i]<=65) {dados.etaria$etaria[i]=5}
if (dados.etaria$idade[i]>65) {dados.etaria$etaria[i]=6}
}
# criando fatores
niveis<-c(1:6)
rotulos<-c("1a12", "13a17","18a25","26a45","46a65","+65")
# aplicando fatores à variável
dados.etaria$etaria=factor(dados.etaria$etaria, levels=niveis, lab=rotulos,ord=TRUE)
# agora preparar o data.frame para apyramid
piramide.etaria<-data.frame(etaria=factor(dados.etaria$etaria),sexo=dados.etaria$sexo,stringsAsFactors=TRUE)
age_pyramid(piramide.etaria,age_group=etaria,split_by=sexo,show_midpoint=FALSE)
# plotando outros gráficos com a variável faixa etária
barplot(table(dados.etaria$covid,dados.etaria$etaria), col=c("red","lightgreen"))
legend(20500,legend=c("covid-19","outras causas"), fill=c("red","lightgreen"),box.col=NA)
###### TRABALHANDO SOMENTE COM MORTES POR COVID-19
###### CRIANDO FAIXAS ETÁRIAS POR FASES DA VIDA
# 1-12anos, 13-17anos, 18-25anos, 26-45anos, 46-65anos, +65anos
dados<-read.dta("do_age_BA.dta")
# eliminando sexo="I" ... visto que produziremos uma pirâmide
dados<-dados[which(dados$sexo!="I"),]
# eliminando outras causas de mortes para ficar somente com as de covid-19
dados<-dados[which(dados$covid=="covid19"),]
# cria data.frame expandido com variável etaria, que conterá classificação da idade (NA=vazio)
dados.etaria<-data.frame(dados,etaria=NA)
# lê o número de linhas a classificar
k<-dim(dados.etaria)[1]
# loop de classificação da idade em faixas etárias
for (i in 1:k) {
if (dados.etaria$idade[i]<=12) {dados.etaria$etaria[i]=1}
if (dados.etaria$idade[i]>12 & dados.etaria$idade[i]<=17) {dados.etaria$etaria[i]=2}
if (dados.etaria$idade[i]>=18 & dados.etaria$idade[i]<=25) {dados.etaria$etaria[i]=3}
if (dados.etaria$idade[i]>=26 & dados.etaria$idade[i]<=45) {dados.etaria$etaria[i]=4}
if (dados.etaria$idade[i]>=46 & dados.etaria$idade[i]<=65) {dados.etaria$etaria[i]=5}
if (dados.etaria$idade[i]>65) {dados.etaria$etaria[i]=6}
}
# criando fatores
niveis<-c(1:6)
rotulos<-c("1a12", "13a17","18a25","26a45","46a65","+65")
# aplicando fatores à variável
dados.etaria$etaria=factor(dados.etaria$etaria, levels=niveis, lab=rotulos,ord=TRUE)
# palette de cores predefinidas R3, ggplot2, ... lista de palletes comando palette.pals()
barplot(table(dados.etaria$regiao_saude,dados.etaria$etaria),col=palette("R3"))
# abre outra tela gráfica
x11()
barplot(table(dados.etaria$regiao_saude,dados.etaria$etaria),col=palette("ggplot2"))
# abre outra tela gráfica
x11()
barplot(table(dados.etaria$regiao_saude,dados.etaria$etaria),col=palette("Pastel 1"))
# abre outra tela gráfica
x11()
barplot(table(dados.etaria$regiao_saude,dados.etaria$etaria),col=palette("Accent"))
library(foreign, lib.loc = "C:/Program Files/R/R-4.1.1/library")
dados<-read.dta("IBM/do_age_MG.dta")
library(haven)
do_age_MG <- read_dta("do_age_MG.dta")
View(do_age_MG)
dados<-read.dta("IBM/do_age_MG.dta")
curva.dia.geral<-table(do_age_MG$data_obito
do_age_MG.covid<-do_age_MG[which(do_age_MG$covid=="covid19"),]
dados.covid<-dados[which(dados$covid=="covid19"),]
dados<-read.dta("IBM/do_age_MG.dta")
library(foreign, lib.loc = "C:/Program Files/R/R-4.1.1/library")
dados<-read.dta("IBM/do_age_MG.dta")
library(haven)
do_age_MG <- read_dta("do_age_MG.dta")
View(do_age_MG)
library(haven)
dados <- read_dta("do_age_MG.dta")
View(dados)
# contagens de �bitos gerais por dia
curva.dia.geral<-table(dados$data_obito)
# s� �bitos por covi19
dados.covid<-dados[which(dados$covid=="covid19"),]
# contagem de �bitos por covid19 por dia
curva.dia.covid<-table(dados.covid$data_obito)
# objeto "table" com frequencias di�rias
# plota curva epid�mica di�ria
# par() ... par�metros gr�ficos de alto n�vel hier�rquico
# copia par�metros antigos para retom�-los posteriormente, se precisar (boa pr�tica)
old<-par()
# novos par�metros ... tela escura
par(bg="black",col.axis="gray",cex.axis=0.5)
barplot(curva.dia.covid, col="red", border=NA,bg="black",cex.axis=1.2)
# o comando barplot abre a janela gr�fica e a partir de ent�o podem
# ser dados outros comandos complementares
title(main="mortalidade di�ria por COVID-19",xlab="data do �bito",ylab="contagem")
abline(h=c(50,100,150),col=gray(0.4),lw=0.5)
# calculando as m�dias m�veis
# cria data.frame para acessar os valores do objeto "table"
# aqui tem um pulo do gato ... curva.dia.covid n�o � vetor, nem matrix e nem lista
# seu conte�do n�o � acess�vel pelas coordenadas tipo [linha,coluna]
# ent�o transformamos em data.frame, primeiro, e depois mudamos os nomes das vari�veis (obitos)
mortes<-data.frame(curva.dia.covid)
# observe que isto cria as vari�veis "Var1" e "Freq" (estavam no objeto table)
obitos<-data.frame(data=mortes$Var1,obitos=mortes$Freq)
n<-dim(obitos)[1]
# cria vetor "media.7d" com dimens�o dos valores, mas vazio, que receber� as m�dias m�veis
media.7d<-c(rep(0,times=n))
# calcula as m�dias m�veis e atribui o valor � "media.7d"
k<-(n-6)
for (i in 1:k) {
j<-(i+6)
media.temp<-round(mean(obitos$obitos[i:j]),digits=1)
media.7d[j]<-media.temp
}
mm7d<-data.frame(data=obitos$data,mortes=obitos$obitos,mmovel=media.7d)
# plota dupla de gr�ficos
# o par�metro mfrow prepara o array para plotar
par(mfrow=c(2,1),bg="black",col.axis=gray(0.4),cex.axis=0.5,col.main=gray(0.8))
par(mfrow=c(2,1),bg="black",col.axis=gray(0.4),cex.axis=0.5,col.main=gray(0.8))
par(mfrow=c(2,1),bg="white",col.axis=gray(0.4),cex.axis=0.5,col.main=gray(0.8))
# primeiro gr�fico
barplot(mm7d$mortes, col="red",border=NA,cex.axis=1)
title(main="morte di�ria por COVID-19",xlab="data do �bito",ylab="contagem")
par(mfrow=c(2,1),bg="black",col.axis=gray(0.4),cex.axis=0.5,col.main=gray(0.8))
# primeiro gr�fico
barplot(mm7d$mortes, col="red",border=NA,cex.axis=1)
title(main="morte di�ria por COVID-19",xlab="data do �bito",ylab="contagem")
# segundo gr�fico
plot(mm7d$data,mm7d$mmovel,type="l",lwd=1,col="green",xlab=NA,ylab=NA)
title(main="m�dia m�vel de 7 dias",xlab="data do �bito",ylab="contagem")
lines(mm7d$data,mm7d$mmovel,col="blue",lwd=2)
# calculando as m�dias m�veis
# cria data.frame para acessar os valores do objeto "table"
# aqui tem um pulo do gato ... curva.dia.covid n�o � vetor, nem matrix e nem lista
# seu conte�do n�o � acess�vel pelas coordenadas tipo [linha,coluna]
# ent�o transformamos em data.frame, primeiro, e depois mudamos os nomes das vari�veis (obitos)
mortes<-data.frame(curva.dia.covid)
# observe que isto cria as vari�veis "Var1" e "Freq" (estavam no objeto table)
obitos<-data.frame(data=mortes$Var1,obitos=mortes$Freq)
n<-dim(obitos)[1]
# cria vetor "media.7d" com dimens�o dos valores, mas vazio, que receber� as m�dias m�veis
media.7d<-c(rep(0,times=n))
# calcula as m�dias m�veis e atribui o valor � "media.7d"
k<-(n-6)
for (i in 1:k) {
j<-(i+6)
media.temp<-round(mean(obitos$obitos[i:j]),digits=1)
media.7d[j]<-media.temp
}
mm7d<-data.frame(data=obitos$data,mortes=obitos$obitos,mmovel=media.7d)
# plota dupla de gr�ficos
# o par�metro mfrow prepara o array para plotar
par(mfrow=c(2,1),bg="black",col.axis=gray(0.4),cex.axis=0.5,col.main=gray(0.8))
# primeiro gr�fico
barplot(mm7d$mortes, col="red",border=NA,cex.axis=1)
title(main="morte di�ria por COVID-19",xlab="data do �bito",ylab="contagem")
# segundo gr�fico
plot(mm7d$data,mm7d$mmovel,type="l",lwd=1,col="green",xlab=NA,ylab=NA)
title(main="m�dia m�vel de 7 dias",xlab="data do �bito",ylab="contagem")
lines(mm7d$data,mm7d$mmovel,col="blue",lwd=2)
# calculando as m�dias m�veis
# cria data.frame para acessar os valores do objeto "table"
# aqui tem um pulo do gato ... curva.dia.covid n�o � vetor, nem matrix e nem lista
# seu conte�do n�o � acess�vel pelas coordenadas tipo [linha,coluna]
# ent�o transformamos em data.frame, primeiro, e depois mudamos os nomes das vari�veis (obitos)
mortes<-data.frame(curva.dia.covid)
# observe que isto cria as vari�veis "Var1" e "Freq" (estavam no objeto table)
obitos<-data.frame(data=mortes$Var1,obitos=mortes$Freq)
n<-dim(obitos)[1]
# cria vetor "media.7d" com dimens�o dos valores, mas vazio, que receber� as m�dias m�veis
media.7d<-c(rep(0,times=n))
# calcula as m�dias m�veis e atribui o valor � "media.7d"
k<-(n-6)
for (i in 1:k) {
j<-(i+6)
media.temp<-round(mean(obitos$obitos[i:j]),digits=1)
media.7d[j]<-media.temp
}
mm7d<-data.frame(data=obitos$data,mortes=obitos$obitos,mmovel=media.7d)
# plota dupla de gr�ficos
# o par�metro mfrow prepara o array para plotar
par(mfrow=c(2,1),bg="black",col.axis=gray(0.4),cex.axis=0.5,col.main=gray(0.8))
# primeiro gr�fico
barplot(mm7d$mortes, col="red",border=NA,cex.axis=1)
title(main="morte diária por COVID-19",xlab="data do óbito",ylab="contagem")
# segundo gr�fico
plot(mm7d$data,mm7d$mmovel,type="l",lwd=1,col="green",xlab=NA,ylab=NA)
title(main="média móvel de 7 dias",xlab="data do �óito",ylab="contagem")
lines(mm7d$data,mm7d$mmovel,col="blue",lwd=2)
